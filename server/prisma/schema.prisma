generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGO_URI")
}

type Address {
  street String?
  city   String?
  state  String?
  zip    String?
}

model User {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  email          String   @unique
  password       String
  profileImage   String?
  coverImage     String?
  jobTitle       String?
  relationStatus String?
  worksAt        String?
  address        Address?
  following      String[] @db.ObjectId
  followers      String[] @db.ObjectId
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  posts         Post[]
  comment       Comment[]
  notifications Notification[]
}

model Post {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  imageSrc  String?
  user      User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String    @db.ObjectId
  likedBy   String[]  @db.ObjectId
  comments  Comment[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @db.ObjectId
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Notification {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  senderId   String  @db.ObjectId
  receiverId String? @db.ObjectId
  message    String
  read       Boolean @default(false)
  user       User?   @relation(fields: [receiverId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
